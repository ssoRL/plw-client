{{#definitions}}
export type {{&name}} = {{#tsType}}{{> type}}{{/tsType}};
{{/definitions}}

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export class {{&className}} {
    private static self: API | null = null;

    public domain: string | null = null;
    public token: string | null = null;
    public errorHandlers: (() => {})[] = [];

    private constructor () {}

    static Instance() {
        if(API.instance == null) {
            API.instance = new API();
        }
        
        return API.instance;
    }

{{#methods}}
    {{> method}}

{{/methods}}

    private get(
        url: string,
        extraHeaders: {[param: string]: string} = {}
    ) {
        // Create the Headers
        let headers = new Headers({
            'Content-Type': 'application/json'
        });

        for(const param in extraHeaders) {
            headers.append(param, extraHeaders[param]);
        }

        return fetch(url, {
            method: 'get',
            headers: headers
        }).catch(reason =>
            this.errorHandler(reason)
        );
    }

    private post(
        url: string,
        stringifiedBody: string,
        extraHeaders: {[param: string]: string} = {}
    ) {
        // Create the Headers
        let headers = new Headers({
            'Content-Type': 'application/json'
        });

        for(const param in extraHeaders) {
            headers.append(param, extraHeaders[param]);
        }

        return fetch(url, {
            method: 'post',
            headers: headers,
            body: stringifiedBody
        }).catch(reason =>
            this.errorHandler(reason)
        );
    }
}